<script src="js/qgis2web_expressions.js"></script>
<script src="js/leaflet.js"></script>
<script src="js/L.Control.Locate.min.js"></script>
<script src="js/leaflet.rotatedMarker.js"></script>
<script src="js/leaflet.pattern.js"></script>
<script src="js/leaflet-hash.js"></script>
<script src="js/Autolinker.min.js"></script>
<script src="js/rbush.min.js"></script>
<script src="js/labelgun.min.js"></script>
<script src="js/labels.js"></script>
<script src="js/leaflet-control-geocoder.Geocoder.js"></script>
<script src="js/leaflet-measure.js"></script>
<script src="js/leaflet-search.js"></script>
<script src="data/Bookshop_2.js"></script>
<script src="data/Cafe_3.js"></script>
<script src="data/Playground_4.js"></script>
<script src="data/Church_5.js"></script>

<script>
    var highlightLayer;
    function highlightFeature(e) {
        highlightLayer = e.target;
        if (e.target.feature.geometry.type === 'LineString') {
            highlightLayer.setStyle({color: '#ffff00',});
        } else {
            highlightLayer.setStyle({fillColor: '#ffff00',fillOpacity: 1});
        }
        highlightLayer.openPopup();
    }
    var map = L.map('map', {zoomControl:true, maxZoom:28, minZoom:1}).fitBounds([[-41.61155087876729,-179.65072232146514],[-34.31430481214986,179.9170039205514]]);
    var hash = new L.Hash(map);
    map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
    var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
    L.control.locate({locateOptions: {maxZoom: 19}}).addTo(map);
    var measureControl = new L.Control.Measure({
        position: 'topleft',
        primaryLengthUnit: 'meters',
        secondaryLengthUnit: 'kilometers',
        primaryAreaUnit: 'sqmeters',
        secondaryAreaUnit: 'hectares'
    });
    measureControl.addTo(map);
    document.getElementsByClassName('leaflet-control-measure-toggle')[0].innerHTML = '';
    document.getElementsByClassName('leaflet-control-measure-toggle')[0].className += ' fas fa-ruler';
    var bounds_group = new L.featureGroup([]);
    function setBounds(){ }
    map.createPane('pane_LINZNZAerialImagery_0');
    map.getPane('pane_LINZNZAerialImagery_0').style.zIndex = 400;
    var layer_LINZNZAerialImagery_0 = L.tileLayer('https://basemaps.linz.govt.nz/v1/tiles/aerial/EPSG:3857/{z}/{x}/{y}.jpg?api=d01egend5f8dv4zcbfj6z2t7rs3', {
        pane: 'pane_LINZNZAerialImagery_0',
        opacity: 1.0,
        attribution: '<a href="https://www.linz.govt.nz/data/licensing-and-using-data/attributing-elevation-or-aerial-imagery-data">Sourced from LINZ CC-BY 4.0</a>',
        minZoom: 1,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 21
    });
    layer_LINZNZAerialImagery_0;
    map.addLayer(layer_LINZNZAerialImagery_0);
    map.createPane('pane_OpenStreetMap_1');
    map.getPane('pane_OpenStreetMap_1').style.zIndex = 401;
    var layer_OpenStreetMap_1 = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        pane: 'pane_OpenStreetMap_1',
        opacity: 1.0,
        attribution: '',
        minZoom: 1,
        maxZoom: 28,
        minNativeZoom: 0,
        maxNativeZoom: 19
    });
    layer_OpenStreetMap_1;
    map.addLayer(layer_OpenStreetMap_1);
    function pop_Bookshop_2(feature, layer) {
        layer.on({
            mouseout: function(e) {
                for (i in e.target._eventParents) {
                    e.target._eventParents[i].resetStyle(e.target);
                }
                if (typeof layer.closePopup == 'function') {
                    layer.closePopup();
                } else {
                    layer.eachLayer(function(feature){feature.closePopup()});
                }
            },
            mouseover: highlightFeature,
        });
        var popupContent = '<table>\
                <tr>\
                    <td colspan="2">' + (feature.properties['full_id'] !== null ? autolinker.link(feature.properties['full_id'].toLocaleString()) : '') + '</td>\
                </tr>\
            </table>';
        layer.bindPopup(popupContent, {maxHeight: 400});
    }

    function style_Bookshop_2_0() {
        return {
            pane: 'pane_Bookshop_2',
            radius: 4.0,
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(227,26,28,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Bookshop_2');
    map.getPane('pane_Bookshop_2').style.zIndex = 402;
    map.getPane('pane_Bookshop_2').style['mix-blend-mode'] = 'normal';
    var layer_Bookshop_2 = new L.geoJson(json_Bookshop_2, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Bookshop_2',
        layerName: 'layer_Bookshop_2',
        pane: 'pane_Bookshop_2',
        onEachFeature: pop_Bookshop_2,
        pointToLayer: function (feature, latlng) {
            var context = {feature: feature, variables: {}};
            return L.circleMarker(latlng, style_Bookshop_2_0(feature));
        },
    });
    bounds_group.addLayer(layer_Bookshop_2);
    map.addLayer(layer_Bookshop_2);
    function pop_Cafe_3(feature, layer) {
        layer.on({
            mouseout: function(e) {
                for (i in e.target._eventParents) {
                    e.target._eventParents[i].resetStyle(e.target);
                }
                if (typeof layer.closePopup == 'function') {
                    layer.closePopup();
                } else {
                    layer.eachLayer(function(feature){feature.closePopup()});
                }
            },
            mouseover: highlightFeature,
        });
        var popupContent = '<table>\
                <tr>\
                    <td colspan="2">' + (feature.properties['full_id'] !== null ? autolinker.link(feature.properties['full_id'].toLocaleString()) : '') + '</td>\
                </tr>\
            </table>';
        layer.bindPopup(popupContent, {maxHeight: 400});
    }

    function style_Cafe_3_0() {
        return {
            pane: 'pane_Cafe_3',
            radius: 4.0,
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(141,90,153,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Cafe_3');
    map.getPane('pane_Cafe_3').style.zIndex = 403;
    map.getPane('pane_Cafe_3').style['mix-blend-mode'] = 'normal';
    var layer_Cafe_3 = new L.geoJson(json_Cafe_3, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Cafe_3',
        layerName: 'layer_Cafe_3',
        pane: 'pane_Cafe_3',
        onEachFeature: pop_Cafe_3,
        pointToLayer: function (feature, latlng) {
            var context = {feature: feature, variables: {}};
            return L.circleMarker(latlng, style_Cafe_3_0(feature));
        },
    });
    bounds_group.addLayer(layer_Cafe_3);
    map.addLayer(layer_Cafe_3);
    function pop_Playground_4(feature, layer) {
        layer.on({
            mouseout: function(e) {
                for (i in e.target._eventParents) {
                    e.target._eventParents[i].resetStyle(e.target);
                }
                if (typeof layer.closePopup == 'function') {
                    layer.closePopup();
                } else {
                    layer.eachLayer(function(feature){feature.closePopup()});
                }
            },
            mouseover: highlightFeature,
        });
        var popupContent = '<table>\
                <tr>\
                    <td colspan="2">' + (feature.properties['full_id'] !== null ? autolinker.link(feature.properties['full_id'].toLocaleString()) : '') + '</td>\
                </tr>\
            </table>';
        layer.bindPopup(popupContent, {maxHeight: 400});
    }

    function style_Playground_4_0() {
        return {
            pane: 'pane_Playground_4',
            radius: 4.0,
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(125,139,143,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Playground_4');
    map.getPane('pane_Playground_4').style.zIndex = 404;
    map.getPane('pane_Playground_4').style['mix-blend-mode'] = 'normal';
    var layer_Playground_4 = new L.geoJson(json_Playground_4, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Playground_4',
        layerName: 'layer_Playground_4',
        pane: 'pane_Playground_4',
        onEachFeature: pop_Playground_4,
        pointToLayer: function (feature, latlng) {
            var context = {feature: feature, variables: {}};
            return L.circleMarker(latlng, style_Playground_4_0(feature));
        },
    });
    bounds_group.addLayer(layer_Playground_4);
    map.addLayer(layer_Playground_4);
    function pop_Church_5(feature, layer) {
        layer.on({
            mouseout: function(e) {
                for (i in e.target._eventParents) {
                    e.target._eventParents[i].resetStyle(e.target);
                }
                if (typeof layer.closePopup == 'function') {
                    layer.closePopup();
                } else {
                    layer.eachLayer(function(feature){feature.closePopup()});
                }
            },
            mouseover: highlightFeature,
        });
        var popupContent = '<table>\
                <tr>\
                    <th scope="row">placeUrl</th>\
                    <td>' + (feature.properties['placeUrl'] !== null ? autolinker.link(feature.properties['placeUrl'].toLocaleString()) : '') + '</td>\
                </tr>\
            </table>';
        layer.bindPopup(popupContent, {maxHeight: 400});
    }

    function style_Church_5_0() {
        return {
            pane: 'pane_Church_5',
            radius: 4.0,
            opacity: 1,
            color: 'rgba(35,35,35,1.0)',
            dashArray: '',
            lineCap: 'butt',
            lineJoin: 'miter',
            weight: 1,
            fill: true,
            fillOpacity: 1,
            fillColor: 'rgba(213,180,60,1.0)',
            interactive: true,
        }
    }
    map.createPane('pane_Church_5');
    map.getPane('pane_Church_5').style.zIndex = 405;
    map.getPane('pane_Church_5').style['mix-blend-mode'] = 'normal';
    var layer_Church_5 = new L.geoJson(json_Church_5, {
        attribution: '',
        interactive: true,
        dataVar: 'json_Church_5',
        layerName: 'layer_Church_5',
        pane: 'pane_Church_5',
        onEachFeature: pop_Church_5,
        pointToLayer: function (feature, latlng) {
            var context = {feature: feature, variables: {}};
            return L.circleMarker(latlng, style_Church_5_0(feature));
        },
    });
    bounds_group.addLayer(layer_Church_5);
    map.addLayer(layer_Church_5);
    var osmGeocoder = new L.Control.Geocoder({collapsed: true, position: 'topleft', text: 'Search', title: 'Testing'}).addTo(map);
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0].className += ' fa fa-search';
    document.getElementsByClassName('leaflet-control-geocoder-icon')[0].title += 'Search for a place';
    var baseMaps = {};
    L.control.layers(baseMaps,{'<img src="legend/Church_5.png" /> Church': layer_Church_5,'<img src="legend/Playground_4.png" /> Playground': layer_Playground_4,'<img src="legend/Cafe_3.png" /> Cafe': layer_Cafe_3,'<img src="legend/Bookshop_2.png" /> Bookshop': layer_Bookshop_2,"OpenStreetMap": layer_OpenStreetMap_1,"LINZ NZ Aerial Imagery": layer_LINZNZAerialImagery_0,}).addTo(map);
    setBounds();
    map.addControl(new L.Control.Search({layer: layer_Church_5, initial: false, hideMarkerOnCollapse: true, propertyName: 'title'}));
    document.getElementsByClassName('search-button')[0].className += ' fa fa-binoculars';
</script>